#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WpfApplication12
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="bdd")]
	public partial class DataClasses1DataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertUtilisateur(Utilisateur instance);
    partial void UpdateUtilisateur(Utilisateur instance);
    partial void DeleteUtilisateur(Utilisateur instance);
    partial void InsertActivité(Activité instance);
    partial void UpdateActivité(Activité instance);
    partial void DeleteActivité(Activité instance);
    partial void InsertTâche(Tâche instance);
    partial void UpdateTâche(Tâche instance);
    partial void DeleteTâche(Tâche instance);
    partial void InsertDocument(Document instance);
    partial void UpdateDocument(Document instance);
    partial void DeleteDocument(Document instance);
    partial void InsertAlerte(Alerte instance);
    partial void UpdateAlerte(Alerte instance);
    partial void DeleteAlerte(Alerte instance);
    partial void Insertévènement(évènement instance);
    partial void Updateévènement(évènement instance);
    partial void Deleteévènement(évènement instance);
    partial void InsertContact(Contact instance);
    partial void UpdateContact(Contact instance);
    partial void DeleteContact(Contact instance);
    #endregion
		
		public DataClasses1DataContext() : 
				base(global::WpfApplication12.Properties.Settings.Default.bddConnectionString1, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Utilisateur> Utilisateurs
		{
			get
			{
				return this.GetTable<Utilisateur>();
			}
		}
		
		public System.Data.Linq.Table<Activité> Activités
		{
			get
			{
				return this.GetTable<Activité>();
			}
		}
		
		public System.Data.Linq.Table<Tâche> Tâches
		{
			get
			{
				return this.GetTable<Tâche>();
			}
		}
		
		public System.Data.Linq.Table<Document> Documents
		{
			get
			{
				return this.GetTable<Document>();
			}
		}
		
		public System.Data.Linq.Table<Alerte> Alertes
		{
			get
			{
				return this.GetTable<Alerte>();
			}
		}
		
		public System.Data.Linq.Table<évènement> évènements
		{
			get
			{
				return this.GetTable<évènement>();
			}
		}
		
		public System.Data.Linq.Table<Contact> Contacts
		{
			get
			{
				return this.GetTable<Contact>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Utilisateurs")]
	public partial class Utilisateur : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id_utilisateur;
		
		private string _Nom;
		
		private string _Prenom;
		
		private string _Mpasse;
		
		private string _Pseudo;
		
		private EntitySet<Activité> _Activités;
		
		private EntitySet<Tâche> _Tâches;
		
		private EntitySet<Document> _Documents;
		
		private EntitySet<Alerte> _Alertes;
		
		private EntitySet<évènement> _évènements;
		
		private EntitySet<Contact> _Contacts;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnId_utilisateurChanging(int value);
    partial void OnId_utilisateurChanged();
    partial void OnNomChanging(string value);
    partial void OnNomChanged();
    partial void OnPrenomChanging(string value);
    partial void OnPrenomChanged();
    partial void OnMpasseChanging(string value);
    partial void OnMpasseChanged();
    partial void OnPseudoChanging(string value);
    partial void OnPseudoChanged();
    #endregion
		
		public Utilisateur()
		{
			this._Activités = new EntitySet<Activité>(new Action<Activité>(this.attach_Activités), new Action<Activité>(this.detach_Activités));
			this._Tâches = new EntitySet<Tâche>(new Action<Tâche>(this.attach_Tâches), new Action<Tâche>(this.detach_Tâches));
			this._Documents = new EntitySet<Document>(new Action<Document>(this.attach_Documents), new Action<Document>(this.detach_Documents));
			this._Alertes = new EntitySet<Alerte>(new Action<Alerte>(this.attach_Alertes), new Action<Alerte>(this.detach_Alertes));
			this._évènements = new EntitySet<évènement>(new Action<évènement>(this.attach_évènements), new Action<évènement>(this.detach_évènements));
			this._Contacts = new EntitySet<Contact>(new Action<Contact>(this.attach_Contacts), new Action<Contact>(this.detach_Contacts));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id_utilisateur", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id_utilisateur
		{
			get
			{
				return this._Id_utilisateur;
			}
			set
			{
				if ((this._Id_utilisateur != value))
				{
					this.OnId_utilisateurChanging(value);
					this.SendPropertyChanging();
					this._Id_utilisateur = value;
					this.SendPropertyChanged("Id_utilisateur");
					this.OnId_utilisateurChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Nom", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Nom
		{
			get
			{
				return this._Nom;
			}
			set
			{
				if ((this._Nom != value))
				{
					this.OnNomChanging(value);
					this.SendPropertyChanging();
					this._Nom = value;
					this.SendPropertyChanged("Nom");
					this.OnNomChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Prenom", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Prenom
		{
			get
			{
				return this._Prenom;
			}
			set
			{
				if ((this._Prenom != value))
				{
					this.OnPrenomChanging(value);
					this.SendPropertyChanging();
					this._Prenom = value;
					this.SendPropertyChanged("Prenom");
					this.OnPrenomChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Mpasse", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Mpasse
		{
			get
			{
				return this._Mpasse;
			}
			set
			{
				if ((this._Mpasse != value))
				{
					this.OnMpasseChanging(value);
					this.SendPropertyChanging();
					this._Mpasse = value;
					this.SendPropertyChanged("Mpasse");
					this.OnMpasseChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Pseudo", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Pseudo
		{
			get
			{
				return this._Pseudo;
			}
			set
			{
				if ((this._Pseudo != value))
				{
					this.OnPseudoChanging(value);
					this.SendPropertyChanging();
					this._Pseudo = value;
					this.SendPropertyChanged("Pseudo");
					this.OnPseudoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Utilisateur_Activité", Storage="_Activités", ThisKey="Id_utilisateur", OtherKey="id_utilis")]
		public EntitySet<Activité> Activités
		{
			get
			{
				return this._Activités;
			}
			set
			{
				this._Activités.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Utilisateur_Tâche", Storage="_Tâches", ThisKey="Id_utilisateur", OtherKey="id_utilis")]
		public EntitySet<Tâche> Tâches
		{
			get
			{
				return this._Tâches;
			}
			set
			{
				this._Tâches.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Utilisateur_Document", Storage="_Documents", ThisKey="Id_utilisateur", OtherKey="id_utilis")]
		public EntitySet<Document> Documents
		{
			get
			{
				return this._Documents;
			}
			set
			{
				this._Documents.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Utilisateur_Alerte", Storage="_Alertes", ThisKey="Id_utilisateur", OtherKey="id_utilis")]
		public EntitySet<Alerte> Alertes
		{
			get
			{
				return this._Alertes;
			}
			set
			{
				this._Alertes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Utilisateur_évènement", Storage="_évènements", ThisKey="Id_utilisateur", OtherKey="id_utilis")]
		public EntitySet<évènement> évènements
		{
			get
			{
				return this._évènements;
			}
			set
			{
				this._évènements.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Utilisateur_Contact", Storage="_Contacts", ThisKey="Id_utilisateur", OtherKey="Id_utilis")]
		public EntitySet<Contact> Contacts
		{
			get
			{
				return this._Contacts;
			}
			set
			{
				this._Contacts.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Activités(Activité entity)
		{
			this.SendPropertyChanging();
			entity.Utilisateur = this;
		}
		
		private void detach_Activités(Activité entity)
		{
			this.SendPropertyChanging();
			entity.Utilisateur = null;
		}
		
		private void attach_Tâches(Tâche entity)
		{
			this.SendPropertyChanging();
			entity.Utilisateur = this;
		}
		
		private void detach_Tâches(Tâche entity)
		{
			this.SendPropertyChanging();
			entity.Utilisateur = null;
		}
		
		private void attach_Documents(Document entity)
		{
			this.SendPropertyChanging();
			entity.Utilisateur = this;
		}
		
		private void detach_Documents(Document entity)
		{
			this.SendPropertyChanging();
			entity.Utilisateur = null;
		}
		
		private void attach_Alertes(Alerte entity)
		{
			this.SendPropertyChanging();
			entity.Utilisateur = this;
		}
		
		private void detach_Alertes(Alerte entity)
		{
			this.SendPropertyChanging();
			entity.Utilisateur = null;
		}
		
		private void attach_évènements(évènement entity)
		{
			this.SendPropertyChanging();
			entity.Utilisateur = this;
		}
		
		private void detach_évènements(évènement entity)
		{
			this.SendPropertyChanging();
			entity.Utilisateur = null;
		}
		
		private void attach_Contacts(Contact entity)
		{
			this.SendPropertyChanging();
			entity.Utilisateur = this;
		}
		
		private void detach_Contacts(Contact entity)
		{
			this.SendPropertyChanging();
			entity.Utilisateur = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Activité")]
	public partial class Activité : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id_activité;
		
		private string _designation;
		
		private string _type;
		
		private System.Nullable<int> _id_utilis;
		
		private EntitySet<Tâche> _Tâches;
		
		private EntityRef<Utilisateur> _Utilisateur;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onid_activitéChanging(int value);
    partial void Onid_activitéChanged();
    partial void OndesignationChanging(string value);
    partial void OndesignationChanged();
    partial void OntypeChanging(string value);
    partial void OntypeChanged();
    partial void Onid_utilisChanging(System.Nullable<int> value);
    partial void Onid_utilisChanged();
    #endregion
		
		public Activité()
		{
			this._Tâches = new EntitySet<Tâche>(new Action<Tâche>(this.attach_Tâches), new Action<Tâche>(this.detach_Tâches));
			this._Utilisateur = default(EntityRef<Utilisateur>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_activité", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id_activité
		{
			get
			{
				return this._id_activité;
			}
			set
			{
				if ((this._id_activité != value))
				{
					this.Onid_activitéChanging(value);
					this.SendPropertyChanging();
					this._id_activité = value;
					this.SendPropertyChanged("id_activité");
					this.Onid_activitéChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_designation", DbType="VarChar(250) NOT NULL", CanBeNull=false)]
		public string designation
		{
			get
			{
				return this._designation;
			}
			set
			{
				if ((this._designation != value))
				{
					this.OndesignationChanging(value);
					this.SendPropertyChanging();
					this._designation = value;
					this.SendPropertyChanged("designation");
					this.OndesignationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_type", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string type
		{
			get
			{
				return this._type;
			}
			set
			{
				if ((this._type != value))
				{
					this.OntypeChanging(value);
					this.SendPropertyChanging();
					this._type = value;
					this.SendPropertyChanged("type");
					this.OntypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_utilis", DbType="Int")]
		public System.Nullable<int> id_utilis
		{
			get
			{
				return this._id_utilis;
			}
			set
			{
				if ((this._id_utilis != value))
				{
					if (this._Utilisateur.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onid_utilisChanging(value);
					this.SendPropertyChanging();
					this._id_utilis = value;
					this.SendPropertyChanged("id_utilis");
					this.Onid_utilisChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Activité_Tâche", Storage="_Tâches", ThisKey="id_activité", OtherKey="id_activ")]
		public EntitySet<Tâche> Tâches
		{
			get
			{
				return this._Tâches;
			}
			set
			{
				this._Tâches.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Utilisateur_Activité", Storage="_Utilisateur", ThisKey="id_utilis", OtherKey="Id_utilisateur", IsForeignKey=true)]
		public Utilisateur Utilisateur
		{
			get
			{
				return this._Utilisateur.Entity;
			}
			set
			{
				Utilisateur previousValue = this._Utilisateur.Entity;
				if (((previousValue != value) 
							|| (this._Utilisateur.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Utilisateur.Entity = null;
						previousValue.Activités.Remove(this);
					}
					this._Utilisateur.Entity = value;
					if ((value != null))
					{
						value.Activités.Add(this);
						this._id_utilis = value.Id_utilisateur;
					}
					else
					{
						this._id_utilis = default(Nullable<int>);
					}
					this.SendPropertyChanged("Utilisateur");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Tâches(Tâche entity)
		{
			this.SendPropertyChanging();
			entity.Activité = this;
		}
		
		private void detach_Tâches(Tâche entity)
		{
			this.SendPropertyChanging();
			entity.Activité = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Tâche")]
	public partial class Tâche : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id_tache;
		
		private string _designation;
		
		private string _priorité;
		
		private System.Nullable<System.DateTime> _date;
		
		private string _etat;
		
		private System.Nullable<System.DateTime> _fin;
		
		private System.Nullable<int> _id_activ;
		
		private System.Nullable<int> _id_utilis;
		
		private EntitySet<Document> _Documents;
		
		private EntitySet<Alerte> _Alertes;
		
		private EntityRef<Activité> _Activité;
		
		private EntityRef<Utilisateur> _Utilisateur;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnId_tacheChanging(int value);
    partial void OnId_tacheChanged();
    partial void OndesignationChanging(string value);
    partial void OndesignationChanged();
    partial void OnprioritéChanging(string value);
    partial void OnprioritéChanged();
    partial void OndateChanging(System.Nullable<System.DateTime> value);
    partial void OndateChanged();
    partial void OnetatChanging(string value);
    partial void OnetatChanged();
    partial void OnfinChanging(System.Nullable<System.DateTime> value);
    partial void OnfinChanged();
    partial void Onid_activChanging(System.Nullable<int> value);
    partial void Onid_activChanged();
    partial void Onid_utilisChanging(System.Nullable<int> value);
    partial void Onid_utilisChanged();
    #endregion
		
		public Tâche()
		{
			this._Documents = new EntitySet<Document>(new Action<Document>(this.attach_Documents), new Action<Document>(this.detach_Documents));
			this._Alertes = new EntitySet<Alerte>(new Action<Alerte>(this.attach_Alertes), new Action<Alerte>(this.detach_Alertes));
			this._Activité = default(EntityRef<Activité>);
			this._Utilisateur = default(EntityRef<Utilisateur>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id_tache", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id_tache
		{
			get
			{
				return this._Id_tache;
			}
			set
			{
				if ((this._Id_tache != value))
				{
					this.OnId_tacheChanging(value);
					this.SendPropertyChanging();
					this._Id_tache = value;
					this.SendPropertyChanged("Id_tache");
					this.OnId_tacheChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_designation", DbType="VarChar(250)")]
		public string designation
		{
			get
			{
				return this._designation;
			}
			set
			{
				if ((this._designation != value))
				{
					this.OndesignationChanging(value);
					this.SendPropertyChanging();
					this._designation = value;
					this.SendPropertyChanged("designation");
					this.OndesignationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_priorité", DbType="VarChar(50)")]
		public string priorité
		{
			get
			{
				return this._priorité;
			}
			set
			{
				if ((this._priorité != value))
				{
					this.OnprioritéChanging(value);
					this.SendPropertyChanging();
					this._priorité = value;
					this.SendPropertyChanged("priorité");
					this.OnprioritéChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_date", DbType="DateTime")]
		public System.Nullable<System.DateTime> date
		{
			get
			{
				return this._date;
			}
			set
			{
				if ((this._date != value))
				{
					this.OndateChanging(value);
					this.SendPropertyChanging();
					this._date = value;
					this.SendPropertyChanged("date");
					this.OndateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_etat", DbType="VarChar(50)")]
		public string etat
		{
			get
			{
				return this._etat;
			}
			set
			{
				if ((this._etat != value))
				{
					this.OnetatChanging(value);
					this.SendPropertyChanging();
					this._etat = value;
					this.SendPropertyChanged("etat");
					this.OnetatChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fin", DbType="DateTime")]
		public System.Nullable<System.DateTime> fin
		{
			get
			{
				return this._fin;
			}
			set
			{
				if ((this._fin != value))
				{
					this.OnfinChanging(value);
					this.SendPropertyChanging();
					this._fin = value;
					this.SendPropertyChanged("fin");
					this.OnfinChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_activ", DbType="Int")]
		public System.Nullable<int> id_activ
		{
			get
			{
				return this._id_activ;
			}
			set
			{
				if ((this._id_activ != value))
				{
					if (this._Activité.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onid_activChanging(value);
					this.SendPropertyChanging();
					this._id_activ = value;
					this.SendPropertyChanged("id_activ");
					this.Onid_activChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_utilis", DbType="Int")]
		public System.Nullable<int> id_utilis
		{
			get
			{
				return this._id_utilis;
			}
			set
			{
				if ((this._id_utilis != value))
				{
					if (this._Utilisateur.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onid_utilisChanging(value);
					this.SendPropertyChanging();
					this._id_utilis = value;
					this.SendPropertyChanged("id_utilis");
					this.Onid_utilisChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Tâche_Document", Storage="_Documents", ThisKey="Id_tache", OtherKey="id_tach")]
		public EntitySet<Document> Documents
		{
			get
			{
				return this._Documents;
			}
			set
			{
				this._Documents.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Tâche_Alerte", Storage="_Alertes", ThisKey="Id_tache", OtherKey="id_tach")]
		public EntitySet<Alerte> Alertes
		{
			get
			{
				return this._Alertes;
			}
			set
			{
				this._Alertes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Activité_Tâche", Storage="_Activité", ThisKey="id_activ", OtherKey="id_activité", IsForeignKey=true)]
		public Activité Activité
		{
			get
			{
				return this._Activité.Entity;
			}
			set
			{
				Activité previousValue = this._Activité.Entity;
				if (((previousValue != value) 
							|| (this._Activité.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Activité.Entity = null;
						previousValue.Tâches.Remove(this);
					}
					this._Activité.Entity = value;
					if ((value != null))
					{
						value.Tâches.Add(this);
						this._id_activ = value.id_activité;
					}
					else
					{
						this._id_activ = default(Nullable<int>);
					}
					this.SendPropertyChanged("Activité");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Utilisateur_Tâche", Storage="_Utilisateur", ThisKey="id_utilis", OtherKey="Id_utilisateur", IsForeignKey=true)]
		public Utilisateur Utilisateur
		{
			get
			{
				return this._Utilisateur.Entity;
			}
			set
			{
				Utilisateur previousValue = this._Utilisateur.Entity;
				if (((previousValue != value) 
							|| (this._Utilisateur.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Utilisateur.Entity = null;
						previousValue.Tâches.Remove(this);
					}
					this._Utilisateur.Entity = value;
					if ((value != null))
					{
						value.Tâches.Add(this);
						this._id_utilis = value.Id_utilisateur;
					}
					else
					{
						this._id_utilis = default(Nullable<int>);
					}
					this.SendPropertyChanged("Utilisateur");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Documents(Document entity)
		{
			this.SendPropertyChanging();
			entity.Tâche = this;
		}
		
		private void detach_Documents(Document entity)
		{
			this.SendPropertyChanging();
			entity.Tâche = null;
		}
		
		private void attach_Alertes(Alerte entity)
		{
			this.SendPropertyChanging();
			entity.Tâche = this;
		}
		
		private void detach_Alertes(Alerte entity)
		{
			this.SendPropertyChanging();
			entity.Tâche = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Document")]
	public partial class Document : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id_document;
		
		private string _titre;
		
		private string _emplacement;
		
		private System.Nullable<int> _id_évèn;
		
		private System.Nullable<int> _id_tach;
		
		private System.Nullable<int> _id_utilis;
		
		private EntityRef<Tâche> _Tâche;
		
		private EntityRef<Utilisateur> _Utilisateur;
		
		private EntityRef<évènement> _évènement;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnId_documentChanging(int value);
    partial void OnId_documentChanged();
    partial void OntitreChanging(string value);
    partial void OntitreChanged();
    partial void OnemplacementChanging(string value);
    partial void OnemplacementChanged();
    partial void Onid_évènChanging(System.Nullable<int> value);
    partial void Onid_évènChanged();
    partial void Onid_tachChanging(System.Nullable<int> value);
    partial void Onid_tachChanged();
    partial void Onid_utilisChanging(System.Nullable<int> value);
    partial void Onid_utilisChanged();
    #endregion
		
		public Document()
		{
			this._Tâche = default(EntityRef<Tâche>);
			this._Utilisateur = default(EntityRef<Utilisateur>);
			this._évènement = default(EntityRef<évènement>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id_document", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id_document
		{
			get
			{
				return this._Id_document;
			}
			set
			{
				if ((this._Id_document != value))
				{
					this.OnId_documentChanging(value);
					this.SendPropertyChanging();
					this._Id_document = value;
					this.SendPropertyChanged("Id_document");
					this.OnId_documentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_titre", DbType="VarChar(150) NOT NULL", CanBeNull=false)]
		public string titre
		{
			get
			{
				return this._titre;
			}
			set
			{
				if ((this._titre != value))
				{
					this.OntitreChanging(value);
					this.SendPropertyChanging();
					this._titre = value;
					this.SendPropertyChanged("titre");
					this.OntitreChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_emplacement", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string emplacement
		{
			get
			{
				return this._emplacement;
			}
			set
			{
				if ((this._emplacement != value))
				{
					this.OnemplacementChanging(value);
					this.SendPropertyChanging();
					this._emplacement = value;
					this.SendPropertyChanged("emplacement");
					this.OnemplacementChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_évèn", DbType="Int")]
		public System.Nullable<int> id_évèn
		{
			get
			{
				return this._id_évèn;
			}
			set
			{
				if ((this._id_évèn != value))
				{
					if (this._évènement.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onid_évènChanging(value);
					this.SendPropertyChanging();
					this._id_évèn = value;
					this.SendPropertyChanged("id_évèn");
					this.Onid_évènChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_tach", DbType="Int")]
		public System.Nullable<int> id_tach
		{
			get
			{
				return this._id_tach;
			}
			set
			{
				if ((this._id_tach != value))
				{
					if (this._Tâche.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onid_tachChanging(value);
					this.SendPropertyChanging();
					this._id_tach = value;
					this.SendPropertyChanged("id_tach");
					this.Onid_tachChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_utilis", DbType="Int")]
		public System.Nullable<int> id_utilis
		{
			get
			{
				return this._id_utilis;
			}
			set
			{
				if ((this._id_utilis != value))
				{
					if (this._Utilisateur.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onid_utilisChanging(value);
					this.SendPropertyChanging();
					this._id_utilis = value;
					this.SendPropertyChanged("id_utilis");
					this.Onid_utilisChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Tâche_Document", Storage="_Tâche", ThisKey="id_tach", OtherKey="Id_tache", IsForeignKey=true)]
		public Tâche Tâche
		{
			get
			{
				return this._Tâche.Entity;
			}
			set
			{
				Tâche previousValue = this._Tâche.Entity;
				if (((previousValue != value) 
							|| (this._Tâche.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Tâche.Entity = null;
						previousValue.Documents.Remove(this);
					}
					this._Tâche.Entity = value;
					if ((value != null))
					{
						value.Documents.Add(this);
						this._id_tach = value.Id_tache;
					}
					else
					{
						this._id_tach = default(Nullable<int>);
					}
					this.SendPropertyChanged("Tâche");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Utilisateur_Document", Storage="_Utilisateur", ThisKey="id_utilis", OtherKey="Id_utilisateur", IsForeignKey=true)]
		public Utilisateur Utilisateur
		{
			get
			{
				return this._Utilisateur.Entity;
			}
			set
			{
				Utilisateur previousValue = this._Utilisateur.Entity;
				if (((previousValue != value) 
							|| (this._Utilisateur.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Utilisateur.Entity = null;
						previousValue.Documents.Remove(this);
					}
					this._Utilisateur.Entity = value;
					if ((value != null))
					{
						value.Documents.Add(this);
						this._id_utilis = value.Id_utilisateur;
					}
					else
					{
						this._id_utilis = default(Nullable<int>);
					}
					this.SendPropertyChanged("Utilisateur");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="évènement_Document", Storage="_évènement", ThisKey="id_évèn", OtherKey="Id_évènement", IsForeignKey=true)]
		public évènement évènement
		{
			get
			{
				return this._évènement.Entity;
			}
			set
			{
				évènement previousValue = this._évènement.Entity;
				if (((previousValue != value) 
							|| (this._évènement.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._évènement.Entity = null;
						previousValue.Documents.Remove(this);
					}
					this._évènement.Entity = value;
					if ((value != null))
					{
						value.Documents.Add(this);
						this._id_évèn = value.Id_évènement;
					}
					else
					{
						this._id_évèn = default(Nullable<int>);
					}
					this.SendPropertyChanged("évènement");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Alertes")]
	public partial class Alerte : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id_alerte;
		
		private System.DateTime _temps;
		
		private bool _activer;
		
		private System.Nullable<int> _id_évèn;
		
		private System.Nullable<int> _id_tach;
		
		private string _son;
		
		private System.Nullable<int> _id_utilis;
		
		private EntityRef<Tâche> _Tâche;
		
		private EntityRef<Utilisateur> _Utilisateur;
		
		private EntityRef<évènement> _évènement;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnId_alerteChanging(int value);
    partial void OnId_alerteChanged();
    partial void OntempsChanging(System.DateTime value);
    partial void OntempsChanged();
    partial void OnactiverChanging(bool value);
    partial void OnactiverChanged();
    partial void Onid_évènChanging(System.Nullable<int> value);
    partial void Onid_évènChanged();
    partial void Onid_tachChanging(System.Nullable<int> value);
    partial void Onid_tachChanged();
    partial void OnsonChanging(string value);
    partial void OnsonChanged();
    partial void Onid_utilisChanging(System.Nullable<int> value);
    partial void Onid_utilisChanged();
    #endregion
		
		public Alerte()
		{
			this._Tâche = default(EntityRef<Tâche>);
			this._Utilisateur = default(EntityRef<Utilisateur>);
			this._évènement = default(EntityRef<évènement>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id_alerte", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id_alerte
		{
			get
			{
				return this._Id_alerte;
			}
			set
			{
				if ((this._Id_alerte != value))
				{
					this.OnId_alerteChanging(value);
					this.SendPropertyChanging();
					this._Id_alerte = value;
					this.SendPropertyChanged("Id_alerte");
					this.OnId_alerteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_temps", DbType="DateTime NOT NULL")]
		public System.DateTime temps
		{
			get
			{
				return this._temps;
			}
			set
			{
				if ((this._temps != value))
				{
					this.OntempsChanging(value);
					this.SendPropertyChanging();
					this._temps = value;
					this.SendPropertyChanged("temps");
					this.OntempsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_activer", DbType="Bit NOT NULL")]
		public bool activer
		{
			get
			{
				return this._activer;
			}
			set
			{
				if ((this._activer != value))
				{
					this.OnactiverChanging(value);
					this.SendPropertyChanging();
					this._activer = value;
					this.SendPropertyChanged("activer");
					this.OnactiverChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_évèn", DbType="Int")]
		public System.Nullable<int> id_évèn
		{
			get
			{
				return this._id_évèn;
			}
			set
			{
				if ((this._id_évèn != value))
				{
					if (this._évènement.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onid_évènChanging(value);
					this.SendPropertyChanging();
					this._id_évèn = value;
					this.SendPropertyChanged("id_évèn");
					this.Onid_évènChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_tach", DbType="Int")]
		public System.Nullable<int> id_tach
		{
			get
			{
				return this._id_tach;
			}
			set
			{
				if ((this._id_tach != value))
				{
					if (this._Tâche.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onid_tachChanging(value);
					this.SendPropertyChanging();
					this._id_tach = value;
					this.SendPropertyChanged("id_tach");
					this.Onid_tachChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_son", DbType="VarChar(250)")]
		public string son
		{
			get
			{
				return this._son;
			}
			set
			{
				if ((this._son != value))
				{
					this.OnsonChanging(value);
					this.SendPropertyChanging();
					this._son = value;
					this.SendPropertyChanged("son");
					this.OnsonChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_utilis", DbType="Int")]
		public System.Nullable<int> id_utilis
		{
			get
			{
				return this._id_utilis;
			}
			set
			{
				if ((this._id_utilis != value))
				{
					if (this._Utilisateur.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onid_utilisChanging(value);
					this.SendPropertyChanging();
					this._id_utilis = value;
					this.SendPropertyChanged("id_utilis");
					this.Onid_utilisChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Tâche_Alerte", Storage="_Tâche", ThisKey="id_tach", OtherKey="Id_tache", IsForeignKey=true)]
		public Tâche Tâche
		{
			get
			{
				return this._Tâche.Entity;
			}
			set
			{
				Tâche previousValue = this._Tâche.Entity;
				if (((previousValue != value) 
							|| (this._Tâche.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Tâche.Entity = null;
						previousValue.Alertes.Remove(this);
					}
					this._Tâche.Entity = value;
					if ((value != null))
					{
						value.Alertes.Add(this);
						this._id_tach = value.Id_tache;
					}
					else
					{
						this._id_tach = default(Nullable<int>);
					}
					this.SendPropertyChanged("Tâche");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Utilisateur_Alerte", Storage="_Utilisateur", ThisKey="id_utilis", OtherKey="Id_utilisateur", IsForeignKey=true)]
		public Utilisateur Utilisateur
		{
			get
			{
				return this._Utilisateur.Entity;
			}
			set
			{
				Utilisateur previousValue = this._Utilisateur.Entity;
				if (((previousValue != value) 
							|| (this._Utilisateur.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Utilisateur.Entity = null;
						previousValue.Alertes.Remove(this);
					}
					this._Utilisateur.Entity = value;
					if ((value != null))
					{
						value.Alertes.Add(this);
						this._id_utilis = value.Id_utilisateur;
					}
					else
					{
						this._id_utilis = default(Nullable<int>);
					}
					this.SendPropertyChanged("Utilisateur");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="évènement_Alerte", Storage="_évènement", ThisKey="id_évèn", OtherKey="Id_évènement", IsForeignKey=true)]
		public évènement évènement
		{
			get
			{
				return this._évènement.Entity;
			}
			set
			{
				évènement previousValue = this._évènement.Entity;
				if (((previousValue != value) 
							|| (this._évènement.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._évènement.Entity = null;
						previousValue.Alertes.Remove(this);
					}
					this._évènement.Entity = value;
					if ((value != null))
					{
						value.Alertes.Add(this);
						this._id_évèn = value.Id_évènement;
					}
					else
					{
						this._id_évèn = default(Nullable<int>);
					}
					this.SendPropertyChanged("évènement");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.évènement")]
	public partial class évènement : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id_évènement;
		
		private string _designation;
		
		private System.DateTime _date;
		
		private string _lieu;
		
		private int _id_utilis;
		
		private System.DateTime _fin;
		
		private EntitySet<Document> _Documents;
		
		private EntitySet<Alerte> _Alertes;
		
		private EntityRef<Utilisateur> _Utilisateur;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnId_évènementChanging(int value);
    partial void OnId_évènementChanged();
    partial void OndesignationChanging(string value);
    partial void OndesignationChanged();
    partial void OndateChanging(System.DateTime value);
    partial void OndateChanged();
    partial void OnlieuChanging(string value);
    partial void OnlieuChanged();
    partial void Onid_utilisChanging(int value);
    partial void Onid_utilisChanged();
    partial void OnfinChanging(System.DateTime value);
    partial void OnfinChanged();
    #endregion
		
		public évènement()
		{
			this._Documents = new EntitySet<Document>(new Action<Document>(this.attach_Documents), new Action<Document>(this.detach_Documents));
			this._Alertes = new EntitySet<Alerte>(new Action<Alerte>(this.attach_Alertes), new Action<Alerte>(this.detach_Alertes));
			this._Utilisateur = default(EntityRef<Utilisateur>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id_évènement", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id_évènement
		{
			get
			{
				return this._Id_évènement;
			}
			set
			{
				if ((this._Id_évènement != value))
				{
					this.OnId_évènementChanging(value);
					this.SendPropertyChanging();
					this._Id_évènement = value;
					this.SendPropertyChanged("Id_évènement");
					this.OnId_évènementChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_designation", DbType="VarChar(250) NOT NULL", CanBeNull=false)]
		public string designation
		{
			get
			{
				return this._designation;
			}
			set
			{
				if ((this._designation != value))
				{
					this.OndesignationChanging(value);
					this.SendPropertyChanging();
					this._designation = value;
					this.SendPropertyChanged("designation");
					this.OndesignationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_date", DbType="DateTime NOT NULL")]
		public System.DateTime date
		{
			get
			{
				return this._date;
			}
			set
			{
				if ((this._date != value))
				{
					this.OndateChanging(value);
					this.SendPropertyChanging();
					this._date = value;
					this.SendPropertyChanged("date");
					this.OndateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_lieu", DbType="VarChar(50)")]
		public string lieu
		{
			get
			{
				return this._lieu;
			}
			set
			{
				if ((this._lieu != value))
				{
					this.OnlieuChanging(value);
					this.SendPropertyChanging();
					this._lieu = value;
					this.SendPropertyChanged("lieu");
					this.OnlieuChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_utilis", DbType="Int NOT NULL")]
		public int id_utilis
		{
			get
			{
				return this._id_utilis;
			}
			set
			{
				if ((this._id_utilis != value))
				{
					if (this._Utilisateur.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onid_utilisChanging(value);
					this.SendPropertyChanging();
					this._id_utilis = value;
					this.SendPropertyChanged("id_utilis");
					this.Onid_utilisChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fin", DbType="DateTime NOT NULL")]
		public System.DateTime fin
		{
			get
			{
				return this._fin;
			}
			set
			{
				if ((this._fin != value))
				{
					this.OnfinChanging(value);
					this.SendPropertyChanging();
					this._fin = value;
					this.SendPropertyChanged("fin");
					this.OnfinChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="évènement_Document", Storage="_Documents", ThisKey="Id_évènement", OtherKey="id_évèn")]
		public EntitySet<Document> Documents
		{
			get
			{
				return this._Documents;
			}
			set
			{
				this._Documents.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="évènement_Alerte", Storage="_Alertes", ThisKey="Id_évènement", OtherKey="id_évèn")]
		public EntitySet<Alerte> Alertes
		{
			get
			{
				return this._Alertes;
			}
			set
			{
				this._Alertes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Utilisateur_évènement", Storage="_Utilisateur", ThisKey="id_utilis", OtherKey="Id_utilisateur", IsForeignKey=true)]
		public Utilisateur Utilisateur
		{
			get
			{
				return this._Utilisateur.Entity;
			}
			set
			{
				Utilisateur previousValue = this._Utilisateur.Entity;
				if (((previousValue != value) 
							|| (this._Utilisateur.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Utilisateur.Entity = null;
						previousValue.évènements.Remove(this);
					}
					this._Utilisateur.Entity = value;
					if ((value != null))
					{
						value.évènements.Add(this);
						this._id_utilis = value.Id_utilisateur;
					}
					else
					{
						this._id_utilis = default(int);
					}
					this.SendPropertyChanged("Utilisateur");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Documents(Document entity)
		{
			this.SendPropertyChanging();
			entity.évènement = this;
		}
		
		private void detach_Documents(Document entity)
		{
			this.SendPropertyChanging();
			entity.évènement = null;
		}
		
		private void attach_Alertes(Alerte entity)
		{
			this.SendPropertyChanging();
			entity.évènement = this;
		}
		
		private void detach_Alertes(Alerte entity)
		{
			this.SendPropertyChanging();
			entity.évènement = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Contacts")]
	public partial class Contact : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id_Contact;
		
		private string _Nom;
		
		private string _Adresse;
		
		private string _Tel;
		
		private string _Email;
		
		private string _Sweb;
		
		private System.Nullable<int> _Id_utilis;
		
		private EntityRef<Utilisateur> _Utilisateur;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnId_ContactChanging(int value);
    partial void OnId_ContactChanged();
    partial void OnNomChanging(string value);
    partial void OnNomChanged();
    partial void OnAdresseChanging(string value);
    partial void OnAdresseChanged();
    partial void OnTelChanging(string value);
    partial void OnTelChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnSwebChanging(string value);
    partial void OnSwebChanged();
    partial void OnId_utilisChanging(System.Nullable<int> value);
    partial void OnId_utilisChanged();
    #endregion
		
		public Contact()
		{
			this._Utilisateur = default(EntityRef<Utilisateur>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id_Contact", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id_Contact
		{
			get
			{
				return this._Id_Contact;
			}
			set
			{
				if ((this._Id_Contact != value))
				{
					this.OnId_ContactChanging(value);
					this.SendPropertyChanging();
					this._Id_Contact = value;
					this.SendPropertyChanged("Id_Contact");
					this.OnId_ContactChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Nom", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Nom
		{
			get
			{
				return this._Nom;
			}
			set
			{
				if ((this._Nom != value))
				{
					this.OnNomChanging(value);
					this.SendPropertyChanging();
					this._Nom = value;
					this.SendPropertyChanged("Nom");
					this.OnNomChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Adresse", DbType="VarChar(250)")]
		public string Adresse
		{
			get
			{
				return this._Adresse;
			}
			set
			{
				if ((this._Adresse != value))
				{
					this.OnAdresseChanging(value);
					this.SendPropertyChanging();
					this._Adresse = value;
					this.SendPropertyChanged("Adresse");
					this.OnAdresseChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Tel", DbType="VarChar(50)")]
		public string Tel
		{
			get
			{
				return this._Tel;
			}
			set
			{
				if ((this._Tel != value))
				{
					this.OnTelChanging(value);
					this.SendPropertyChanging();
					this._Tel = value;
					this.SendPropertyChanged("Tel");
					this.OnTelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="VarChar(150)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Sweb", DbType="VarChar(150)")]
		public string Sweb
		{
			get
			{
				return this._Sweb;
			}
			set
			{
				if ((this._Sweb != value))
				{
					this.OnSwebChanging(value);
					this.SendPropertyChanging();
					this._Sweb = value;
					this.SendPropertyChanged("Sweb");
					this.OnSwebChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id_utilis", DbType="Int")]
		public System.Nullable<int> Id_utilis
		{
			get
			{
				return this._Id_utilis;
			}
			set
			{
				if ((this._Id_utilis != value))
				{
					if (this._Utilisateur.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnId_utilisChanging(value);
					this.SendPropertyChanging();
					this._Id_utilis = value;
					this.SendPropertyChanged("Id_utilis");
					this.OnId_utilisChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Utilisateur_Contact", Storage="_Utilisateur", ThisKey="Id_utilis", OtherKey="Id_utilisateur", IsForeignKey=true)]
		public Utilisateur Utilisateur
		{
			get
			{
				return this._Utilisateur.Entity;
			}
			set
			{
				Utilisateur previousValue = this._Utilisateur.Entity;
				if (((previousValue != value) 
							|| (this._Utilisateur.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Utilisateur.Entity = null;
						previousValue.Contacts.Remove(this);
					}
					this._Utilisateur.Entity = value;
					if ((value != null))
					{
						value.Contacts.Add(this);
						this._Id_utilis = value.Id_utilisateur;
					}
					else
					{
						this._Id_utilis = default(Nullable<int>);
					}
					this.SendPropertyChanged("Utilisateur");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
